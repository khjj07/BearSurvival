local move = require "assets.bear.move"
local layering = require "assets.layering"
local defrx=require "defrx.defrx"
local ANIMATION = {
	left_walk = hash("left_walk"),
	right_walk = hash("right_walk"),
	front_walk = hash("front_walk"),
	left_idle = hash("left_idle"),
	right_idle = hash("right_idle"),
	front_idle = hash("front_idle")
}


local MAX_HP=100
local HP_DECREASE_DAYLIGHT=0.167
local HP_DECREASE_DAYLIGHT_ACTION=5
local HP_DECREASE_NIGHT=0.25
local HP_DECREASE_NIGHT_ACTION=10

local TEMPERATURE_DECREASE_DAYLIGHT=0.005
local TEMPERATURE_DECREASE_NIGHT=0.008
local TEMPERATURE_DECREASE_IN_RIVER=0.003
local DEAD_TEMPERATURE=32

local HUNGRY_DECREASE_WAKE=0.167
local HUNGRY_DECREASE_SLEEP=0.083

local MAX_HUNGRY=100

local FIRE_INCREASE = 0.038



go.property("accel", 500)
go.property("friction", 0.1)
go.property("initial_hp", 300)
go.property("initial_hungry", 300)
go.property("initial_temperature", 36.5)
go.property("max_speed", 1200)

local function decrease_hungry(self)
	local value
	if self.tired then
		value = self.hungry.value-HUNGRY_DECREASE_WAKE*1.5
	else
		value = self.hungry.value-HUNGRY_DECREASE_WAKE
	end
	if value <= 0 then
		value=0
	end
	self.hungry:set(value)
end

local function increase_hungry(self,x)
	local value
	value = self.hungry.value+x
	if value >= self.initial_hungry then
		value=self.initial_hungry
	end
	self.hungry:set(value)
end

local function decrease_temperature(self)
	local value
	if self.daylight then
		value = self.temperature.value-TEMPERATURE_DECREASE_DAYLIGHT
	else
		value = self.temperature.value-TEMPERATURE_DECREASE_NIGHT
	end
	if value <= DEAD_TEMPERATURE then
		value=DEAD_TEMPERATURE
	end
	self.temperature:set(value)
end

local function decrease_hp(self)
	local value
	if self.daylight then
		value = self.hp.value-HP_DECREASE_DAYLIGHT
	else
		value = self.hp.value-HP_DECREASE_NIGHT
	end
	if value <= 0 then
		value=0
	end
	self.hp:set(value)
end

local function increase_hp(self)
	local value=self.hp.value+0.25
	if value >= self.initial_hp then
		value=self.initial_hp
	end
	self.hp:set(value)
end

local function rive_animation(self)
	if vmath.length(self.vel)<10 then
		if self.current_animation==ANIMATION.left_walk  then
			rive.cancel("#sprite")
			rive.play_anim("#sprite", "left_idle", go.PLAYBACK_LOOP_FORWARD)
			self.current_animation=ANIMATION.left_idle
		elseif self.current_animation==ANIMATION.right_walk then
			rive.cancel("#sprite")
			rive.play_anim("#sprite", "right_idle", go.PLAYBACK_LOOP_FORWARD)
			self.current_animation=ANIMATION.right_idle
		elseif self.current_animation==ANIMATION.front_walk  then
			rive.cancel("#sprite")
			rive.play_anim("#sprite", "front_idle", go.PLAYBACK_LOOP_FORWARD)
			self.current_animation=ANIMATION.front_idle
		end
	elseif self.vel.y<-5 and math.abs(self.vel.x)<20 and self.current_animation~=ANIMATION.front_walk then
		rive.play_anim("#sprite", "front_walk", go.PLAYBACK_LOOP_FORWARD)
		self.current_animation=ANIMATION.front_walk
	elseif self.vel.x>20 and self.current_animation~=ANIMATION.right_walk then
		rive.play_anim("#sprite", "right_walk", go.PLAYBACK_LOOP_FORWARD)
		self.current_animation=ANIMATION.right_walk
	elseif self.vel.x<-20 and self.current_animation~=ANIMATION.left_walk then
		rive.play_anim("#sprite", "left_walk", go.PLAYBACK_LOOP_FORWARD)
		self.current_animation=ANIMATION.left_walk
	elseif self.vel.y>1 then
		if self.current_animation==ANIMATION.right_idle then
			rive.play_anim("#sprite", "right_walk", go.PLAYBACK_LOOP_FORWARD)
			self.current_animation=ANIMATION.right_walk
		elseif self.current_animation~=ANIMATION.left_walk and self.current_animation~=ANIMATION.right_walk then
			rive.play_anim("#sprite", "left_walk", go.PLAYBACK_LOOP_FORWARD)
			self.current_animation=ANIMATION.left_walk
		end
	end
end

local function game_over(self)
	self.game_over=true
	msg.post(".", "release_input_focus")
	go.delete("/key")
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y-200, go.EASING_OUTBOUNCE, 0.3)
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, -90, go.EASING_INCUBIC, 0.3,0,function()
		timer.delay(0.5, false, function()
			defrx.notify("game_over")
		end)
	end)
end

function init(self)
	print(go.get_id())
	self.daylight=true
	self.tired=false
	self.sleep=false
	self.wood=0
	rive.play_anim("#sprite", "front_idle", go.PLAYBACK_LOOP_FORWARD)
	self.current_animation=ANIMATION.front_idle
	--move
	msg.post(".", "acquire_input_focus")
	move.init(self)

	--reactive property
	self.temperature =  defrx.create_reactive_property(self.initial_temperature, "temperature")
	self.hungry = defrx.create_reactive_property(self.initial_hungry, "hungry")
	self.hp = defrx.create_reactive_property(self.initial_hp, "hp")
	
	--stream
	defrx.create_stream("minute")
	defrx.observe(self, "minute", function(self, message_id, message)
		decrease_hungry(self)
		decrease_temperature(self)
		if not self.sleep then
			decrease_hp(self)
		else
			increase_hp(self)
		end
	end)

	defrx.create_stream("daylight")
	defrx.observe(self, "daylight", function(self, message_id, message)
		self.daylight = message.value
	end)

	defrx.observe(self, "hp", function(self, message_id, message)
		if message.value == 100 then
			defrx.notify("wake_up")
			msg.post(".","acquire_input_focus")
			self.sleep=false
		end
		if message.value<=30 then
			self.max_speed=800
		else
			self.max_speed=1200
		end
		if message.value==0 then
			self.tired=true
		else
			self.tired=false
		end
	end)
	defrx.create_stream("go_home")
	defrx.observe(self, "go_home", function(self, message_id, message, sender)
		go.set_position(go.get_position("/cave_map/cave_spawn_pos"))
	end)
	defrx.create_stream("go_out")
	defrx.observe(self, "go_out", function(self, message_id, message, sender)
		go.set_position(go.get_position("/map/out_spawn_pos"))
	end)
	defrx.create_stream("sleep")
	defrx.observe(self, "sleep", function(self, message_id, message,sender)
		self.sleep=true
		msg.post(".","release_input_focus")
	end)
	
	defrx.create_stream("hungry")
	defrx.observe(self, "hungry", function(self, message_id, message,sender)
		if message.value<=0 and  not self.game_over then
			game_over(self)
		end
	end)
	
	defrx.create_stream("temperature")
	defrx.observe(self, "temperature", function(self, message_id, message,sender)
		if message.value<=32 and not self.game_over then
			game_over(self)
		end
	end)
	
	
	defrx.create_stream("use")
	defrx.observe(self, "use", function(self, message_id, message,sender)
		sound.play("#eat")
		if message.item=="garlic" then
			increase_hungry(self,15)
		elseif message.item=="mugwrot" then
			increase_hungry(self,10)
		elseif message.item=="mushroom_1" then
			increase_hungry(self,20)
		end
	end)
	defrx.create_stream("wood")
	defrx.observe(self, "wood", function(self, message_id, message,sender)
		self.wood=self.wood+1
	end)
	
	defrx.create_stream("use_wood")
	defrx.observe(self, "use_wood", function(self, message_id, message,sender)
		self.wood=self.wood-1
	end)
	
	defrx.create_stream("minigame")
	defrx.observe(self, "minigame", function(self, message_id, message,sender)
		msg.post(".", "release_input_focus")
	end)

	defrx.create_stream("minigame_end")
	defrx.observe(self, "minigame_end", function(self, message_id, message,sender)
		msg.post(".", "acquire_input_focus")
	end)
	defrx.create_stream("force_wake_up")
	defrx.observe(self, "force_wake_up", function(self, message_id, message,sender)
		defrx.notify("wake_up")
		msg.post(".","acquire_input_focus")
		self.sleep=false
	end)
end

function update(self, dt)
	move.update(self, dt)
	rive_animation(self)
	layering.update(self)
	defrx.notify("bear_update", {position=go.get_position()})
	print(self.interact_target)
end

function on_message(self, message_id, message, sender)
	defrx.on_message(self, message_id, message, sender)
	if message_id==hash("contact_point_response") and message.other_group ==hash("obstacle") then
		go.set_position(go.get_position()+message.distance*message.normal)
		self.vel=message.normal*10
	end
	if message_id==hash("collision_response") and message.own_group == hash("bear") then
		if self.interact_target  then
			local last_distance = vmath.length(go.get_position(self.interact_target)-go.get_position()) 
			local current_distance = vmath.length(message.other_position-go.get_position()) 
			if current_distance < last_distance then
				if message.other_group ~= hash("rock") and message.other_group ~= hash("fire_area")  then
					msg.post(self.interact_target, "target_released")
					msg.post(message.other_id, "check_interactable")
					self.interact_target=message.other_id
					defrx.notify("interactable", {value=true})
				end
			end
		else
			if message.other_group ~= hash("rock") and message.other_group ~= hash("fire_area") then
				self.interact_target=message.other_id	
				msg.post(message.other_id, "check_interactable")
				defrx.notify("interactable", {value=true})
			end
		end
	end
	if message_id==hash("fire") then
		local value =  self.temperature.value+FIRE_INCREASE 
		if value>36.5 then
			value=36.5
		end
		self.temperature:set(value)
		
	end
	if message_id==hash("release_target") then
		self.interact_target=nil
		defrx.notify("interactable", {value=false})
	end
	if message_id==hash("cost_hp") then
		local value=self.hp.value-5
		if value <= 0 then
			value=0
		end
		self.hp:set(value)
		self.interact_target=nil
	end	
end

function final(self)
	defrx.cancel_all_observing(self)
end

function on_input(self, action_id, action)
	move.on_input(self, action_id, action)
	if self.interact_target and action_id==hash("interact") and action.pressed then
		msg.post(self.interact_target, "interact",{wood = self.wood})
	end
end
