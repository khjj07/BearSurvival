local layering = require "assets.layering"
local defrx=require "defrx.defrx"
local TREE={
	hash("tree2"),
	hash("tree4"),
	hash("tree5"),
	hash("tree6"),
	hash("tree7"),
	hash("tree8")
}
go.property("behind_sprite", resource.material(""))
go.property("front_sprite", resource.material(""))
go.property("behind_outline", resource.material(""))
go.property("front_outline", resource.material(""))


function init(self)
	timer.delay(0.1, false, function()
		math.randomseed(os.time())
	end)
	local anim = TREE[math.random(#TREE)]
	msg.post("#sprite", "play_animation",{id=anim})
	msg.post("#outline", "play_animation",{id=anim})
	self.interactable=true
	self.behind=false
	defrx.create_stream("dummy")
	defrx.observe(self, "dummy")
	msg.post("#outline", "disable")
end

function update(self, dt)
	layering.update(self)
	if go.get_position("/bear").y<go.get_position().y then
		go.set("#sprite", "material", self.behind_sprite)
		go.set("#outline", "material", self.behind_outline)
	else
		go.set("#sprite", "material", self.front_sprite)
		go.set("#outline", "material", self.front_outline)
	end
end

function on_message(self, message_id, message, sender)
	defrx.on_message(self, message_id, message, sender)
	if message_id==hash("check_interactable") then
		if self.interactable then
			msg.post("#sprite", "disable")
			msg.post("#outline", "enable")
		else
			msg.post(sender, "release_target")
		end
	end
	if message_id==hash("trigger_response") then
		if not message.enter then
			msg.post("#sprite", "enable")
			msg.post("#outline", "disable")
			msg.post(message.other_id, "release_target")
		end
	end
	if message_id==hash("target_released") then
		msg.post("#sprite", "enable")
		msg.post("#outline", "disable")
	end
	if message_id==hash("interact") then
		factory.create("#woodgame")
		defrx.notify("minigame")
		msg.post(sender, "cost_hp")
		msg.post("#sprite", "enable")
		msg.post("#outline", "disable")
		self.interactable=false
		self.day=0
		defrx.observe(self, "day", function(self, message_id, message)
			self.day=self.day+1
			if self.day==3 then
				self.interactable=true
				defrx.cancel_all_observing(self)
			end
		end)	
	end
	
end