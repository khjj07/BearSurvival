local defrx=require "defrx.defrx"
local defui = require "defui.defui"
local UI = require "assets.ui.ingame"

function init(self)
	defui.init(self)
	UI.init(self)
	self.inventory={}
	defrx.create_stream("minute")
	defrx.observe(self, "minute", function(self, message_id, message,sender)
		self.node["needle"]:set_rotation(vmath.vector3(0,0,-message.value*60*0.25))
	end)
	defrx.create_stream("day")
	defrx.observe(self, "day", function(self, message_id, message,sender)
		self.node["day"]:set_text("Day "..message.value)
	end)
	
	defrx.create_stream("hp")
	defrx.observe(self, "hp", function(self, message_id, message,sender)
		local size = self.node["hp_stencil"]:get_size()
		size.y=self.node["hp_stencil"].ininitial_size.y*message.value/100
		self.node["hp_stencil"]:set_size(size)
		self.node["hp"]:set_text(math.floor(message.value))
	end)
	defrx.create_stream("hungry")
	defrx.observe(self, "hungry", function(self, message_id, message,sender)
		local size = self.node["hungry_stencil"]:get_size()
		size.y=self.node["hungry_stencil"].ininitial_size.y*message.value/100
		self.node["hungry_stencil"]:set_size(size)
		self.node["hungry"]:set_text(math.floor(message.value))
	end)

	defrx.create_stream("temperature")
	defrx.observe(self, "temperature", function(self, message_id, message,sender)
		local value = (message.value-32)/4.5
		if value>0.5 then
			self.node["temperature_bar"]:set_color(self.node["temperature_bar"].ininitial_color)
		else
			self.node["temperature_bar"]:set_color(vmath.vector4(0,0,1,1))
		end
		self.node["temperature_bar"]:set_scale(vmath.vector3(1,value,1))
		self.node["temperature"]:set_text(tostring(math.ceil(message.value*10-0.5)/10).."â„ƒ")
		
	end)
	defrx.create_stream("sleep")
	defrx.observe(self, "sleep", function(self, message_id, message,sender)
		self.node["fade"]:animate("color",vmath.vector4(0,0,0,1),gui.EASING_INBACK,0.2)
	end)
	defrx.create_stream("wake_up")
	defrx.observe(self, "wake_up", function(self, message_id, message,sender)
		self.node["fade"]:animate("color",vmath.vector4(0,0,0,0),gui.EASING_INBACK,0.2)
	end)

	defrx.create_stream("update_inventory")
	defrx.observe(self, "update_inventory", function(self, message_id, message,sender)
		for k, v in pairs(self.inventory) do
			self.node["slot"..k]:change_texture(v,"game")
			:set_color(vmath.vector4(1,1,1,1))
		end
	end)
	
	defrx.create_stream("wood")
	defrx.observe(self, "wood", function(self, message_id, message,sender)
		if #self.inventory<=9 then
			table.insert(self.inventory, "wood")
			defrx.notify("update_inventory")
		end
	end)
	defrx.create_stream("mushroom")
	defrx.observe(self, "mushroom", function(self, message_id, message,sender)
		if #self.inventory<=9 then
			table.insert(self.inventory, "mushroom_1")
			defrx.notify("update_inventory")
		end
	end)
	defrx.create_stream("mugwort")
	defrx.observe(self, "mugwort", function(self, message_id, message,sender)
		if #self.inventory<=9 then
			table.insert(self.inventory, "mugwort")
			defrx.notify("update_inventory")
		end
	end)
	defrx.create_stream("garlic")
	defrx.observe(self, "garlic", function(self, message_id, message,sender)
		if #self.inventory<=9 then
			table.insert(self.inventory, "garlic")
			defrx.notify("update_inventory")
		end
	end)
end

function on_message(self, message_id, message, sender)
	defrx.on_message(self, message_id, message, sender)
end

function final(self)
	defrx.cancel_all_observing(self)
end
function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
